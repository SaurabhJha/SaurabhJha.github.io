<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operating-Systems on Saurabh Jha</title>
    <link>http://localhost:1313/categories/operating-systems/</link>
    <description>Recent content in Operating-Systems on Saurabh Jha</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <atom:link href="http://localhost:1313/categories/operating-systems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning to write concurrent programs</title>
      <link>http://localhost:1313/posts/2017-03-14-learning-to-write-concurrent-programs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2017-03-14-learning-to-write-concurrent-programs/</guid>
      <description>&lt;h1 id=&#34;pagetitle&#34;&gt;{{page.title}}&lt;/h1&gt;&#xA;&lt;p&gt;I taught myself some concurrent programming lately. I did it as part of my&#xA;operating systems studies. In this essay, I will illustrate it using an&#xA;example problem.&lt;/p&gt;&#xA;&lt;p&gt;I will be illustrating concurrent programming using operating system primitives.&#xA;[1] There are several different ways to do concurrent programming that does&#xA;not involve interacting with the operating system kernel. Even if we restrict&#xA;ourselves to using kernel primitives, there are many variants. I will&#xA;mainly be concerned with concurrency using mutexes and condition variables. In&#xA;literature, it is sometimes called &lt;em&gt;concurrent programming using shared objects&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
